/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as LoginRouteImport } from "./routes/login";
import { Route as ComunicacoesRouteImport } from "./routes/comunicacoes";
import { Route as IndexRouteImport } from "./routes/index";

const LoginRoute = LoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRouteImport,
} as any);
const ComunicacoesRoute = ComunicacoesRouteImport.update({
  id: "/comunicacoes",
  path: "/comunicacoes",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/comunicacoes": typeof ComunicacoesRoute;
  "/login": typeof LoginRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/comunicacoes": typeof ComunicacoesRoute;
  "/login": typeof LoginRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/comunicacoes": typeof ComunicacoesRoute;
  "/login": typeof LoginRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/comunicacoes" | "/login";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/comunicacoes" | "/login";
  id: "__root__" | "/" | "/comunicacoes" | "/login";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ComunicacoesRoute: typeof ComunicacoesRoute;
  LoginRoute: typeof LoginRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/comunicacoes": {
      id: "/comunicacoes";
      path: "/comunicacoes";
      fullPath: "/comunicacoes";
      preLoaderRoute: typeof ComunicacoesRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComunicacoesRoute: ComunicacoesRoute,
  LoginRoute: LoginRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
