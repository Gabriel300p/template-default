// MVT schema focused on barbershop owner + staff onboarding
// Supabase auth.users supplies identity; this schema stores domain context

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  SUPER_ADMIN
  BARBERSHOP_OWNER
  BARBER
  CLIENT
  PENDING
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

enum BarbershopStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  PENDING_VERIFICATION
}

model User {
  id                String     @id // equals auth.users.id (Supabase auth.users.id)
  email             String     @unique
  role              UserRole   @default(PENDING)
  status            UserStatus @default(ACTIVE)
  mustResetPassword Boolean    @default(false)

  // Personal / identity fields
  firstName   String? // now optional per product decision
  lastName    String?
  displayName String? // Cached combined name
  phone       String?
  cpf         String? @unique
  avatarUrl   String?
  bio         String?

  // Auth related mirrors (optional convenience caching)
  emailVerified DateTime?
  lastLogin     DateTime?
  isSuspended   Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedBarbershops Barbershop[]      @relation("BarbershopOwner")
  staffEntries     BarbershopStaff[]

  @@index([email])
  @@index([role])
  @@index([status])
  @@index([cpf])
  @@index([createdAt])
  @@map("users")
}

model Barbershop {
  id              String           @id @default(cuid())
  name            String
  description     String?
  email           String?
  phone           String?
  website         String?
  logoUrl         String?
  coverUrl        String?
  links           String[]
  appointmentLink String?
  status          BarbershopStatus @default(ACTIVE)
  ownerUserId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User              @relation("BarbershopOwner", fields: [ownerUserId], references: [id])
  staff BarbershopStaff[]

  @@index([ownerUserId])
  @@index([status])
  @@index([createdAt])
  @@map("barbershops")
}

model BarbershopStaff {
  id             String      @id @default(cuid())
  barbershopId   String
  userId         String
  roleInShop     UserRole // Typically BARBER; could support MANAGER later
  status         StaffStatus @default(ACTIVE)
  invitedAt      DateTime?   @default(now())
  hireDate       DateTime?
  terminatedDate DateTime?
  isAvailable    Boolean     @default(true)
  commissionRate Decimal?    @db.Decimal(5, 2)
  salary         Decimal?    @db.Decimal(10, 2)
  internalNotes  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  barbershop Barbershop @relation(fields: [barbershopId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@unique([barbershopId, userId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("barbershop_staff")
}
