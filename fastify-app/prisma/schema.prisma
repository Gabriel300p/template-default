generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String            @id
  email               String            @unique
  role                UserRole          @default(PENDING)
  status              UserStatus        @default(ACTIVE)
  cpf                 String?           @unique @db.VarChar(14)
  avatar_url          String?
  created_at          DateTime          @default(now())
  email_verified      DateTime?
  is_suspended        Boolean           @default(false)
  last_login          DateTime?
  must_reset_password Boolean           @default(false)
  updated_at          DateTime          @updatedAt
  display_name        String?
  is_foreigner        Boolean           @default(false)
  mfa_enabled         Boolean           @default(true)
  passport            String?           @unique @db.VarChar(20)
  phone               String?           @db.VarChar(20)
  mfa_last_verified   DateTime?
  staff_entries       BarbershopStaff[]
  owned_barbershops   Barbershop[]      @relation("BarbershopOwner")
  mfa_sessions        MfaSession[]

  @@index([email])
  @@index([role])
  @@index([status])
  @@index([cpf])
  @@index([passport])
  @@index([created_at])
  @@map("users")
}

model Barbershop {
  id               String            @id @default(cuid())
  description      String?
  phone            String?
  website          String?
  links            String[]
  status           BarbershopStatus  @default(ACTIVE)
  appointment_link String?
  cover_url        String?
  created_at       DateTime          @default(now())
  logo_url         String?
  owner_user_id    String
  updated_at       DateTime          @updatedAt
  name             String
  staff            BarbershopStaff[]
  owner            User              @relation("BarbershopOwner", fields: [owner_user_id], references: [id])

  @@index([owner_user_id])
  @@index([status])
  @@index([created_at])
  @@map("barbershops")
}

model BarbershopStaff {
  id              String      @id @default(cuid())
  status          StaffStatus @default(ACTIVE)
  salary          Decimal?    @db.Decimal(10, 2)
  phone           String?
  barbershop_id   String
  commission_rate Decimal?    @db.Decimal(5, 2)
  created_at      DateTime    @default(now())
  display_name    String?
  first_name      String
  hire_date       DateTime?
  internal_notes  String?
  invited_at      DateTime?   @default(now())
  is_available    Boolean     @default(true)
  last_name       String?
  role_in_shop    UserRole
  terminated_date DateTime?
  updated_at      DateTime    @updatedAt
  user_id         String
  barbershop      Barbershop  @relation(fields: [barbershop_id], references: [id])
  user            User        @relation(fields: [user_id], references: [id])

  @@unique([barbershop_id, user_id])
  @@index([user_id])
  @@index([status])
  @@index([created_at])
  @@map("barbershop_staff")
}

model MfaSession {
  id                    String    @id @default(cuid())
  user_id               String
  code                  String    @db.VarChar(8)
  expires_at            DateTime
  used_at               DateTime?
  created_at            DateTime  @default(now())
  session_duration_days Int       @default(14)
  code_expiry_minutes   Int       @default(10)
  user                  User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([expires_at])
  @@index([used_at])
  @@map("mfa_sessions")
}

enum UserRole {
  SUPER_ADMIN
  BARBERSHOP_OWNER
  BARBER
  CLIENT
  PENDING
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

enum BarbershopStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  PENDING_VERIFICATION
}
