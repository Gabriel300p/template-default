#!/usr/bin/env node

/**
 * Feature Documentation Engine
 * Sistema principal para documenta√ß√£o inteligente de features
 */

const path = require('path');
const GitAnalyzer = require('./git-analyzer');
const FeatureScanner = require('./feature-scanner');
const InteractiveSelector = require('./interactive-selector');
const DocumentationGenerator = require('../generators/documentation-generator');
const ConfigManager = require('../config/config-manager');

class FeatureDocsEngine {
  constructor(options = {}) {
    this.config = new ConfigManager();
    this.gitAnalyzer = new GitAnalyzer();
    this.featureScanner = new FeatureScanner(this.config);
    this.selector = new InteractiveSelector();
    this.generator = new DocumentationGenerator(this.config);
    this.projectRoot = options.rootPath || this.findProjectRoot();
    this.options = options;
  }

  findProjectRoot() {
    let currentDir = process.cwd();
    const fs = require('fs');
    
    while (currentDir !== path.dirname(currentDir)) {
      if (fs.existsSync(path.join(currentDir, 'package.json'))) {
        return currentDir;
      }
      currentDir = path.dirname(currentDir);
    }
    return process.cwd();
  }

  /**
   * Inicializa o engine
   */
  async initialize() {
    console.log('üîß Inicializando Feature Documentation Engine...');
    
    // Verificar se √© reposit√≥rio Git
    this.isGitRepo = this.gitAnalyzer.checkGitRepository();
    if (!this.isGitRepo) {
      console.log('‚ö†Ô∏è N√£o √© um reposit√≥rio Git - algumas funcionalidades ser√£o limitadas');
    }

    // Carregar configura√ß√£o
    this.config.loadFromFile();
    
    console.log('‚úÖ Engine inicializado');
    return true;
  }

  /**
   * Escaneia features dispon√≠veis
   */
  async scanFeatures(changedFiles = null) {
    const featuresDir = path.join(this.projectRoot, 'src', 'features');
    return await this.featureScanner.scanFeatures(featuresDir);
  }

  async run(options = {}) {
    try {
      console.log('üöÄ Feature Documentation System v3.0\n');

      // 1. Configura√ß√£o inicial
      await this.initializeConfig(options);

      // 2. An√°lise de altera√ß√µes (se solicitado)
      const changedFiles = await this.analyzeChanges(options);

      // 3. Escaneamento de features
      const features = await this.scanFeatures(changedFiles);

      // 4. Sele√ß√£o interativa
      const selectedFeatures = await this.selectFeatures(features, options);

      // 5. Preview e confirma√ß√£o
      if (await this.showPreviewAndConfirm(selectedFeatures)) {
        // 6. Gera√ß√£o da documenta√ß√£o
        const results = await this.generateDocumentation(selectedFeatures);
        
        // 7. Relat√≥rio final
        this.showResults(results);
        return results.success;
      }

      console.log('‚èπÔ∏è Opera√ß√£o cancelada pelo usu√°rio');
      return false;

    } catch (error) {
      console.error('‚ùå Erro fatal:', error.message);
      if (options.debug) {
        console.error(error.stack);
      }
      return false;
    }
  }

  async initializeConfig(options) {
    if (options.config || !this.config.exists()) {
      console.log('‚öôÔ∏è Configurando sistema...');
      await this.config.interactiveSetup();
    }

    if (options.showConfig) {
      this.config.display();
    }
  }

  async analyzeChanges(options) {
    if (!options.detectChanges && !options.since) {
      return null;
    }

    console.log('üîç Analisando altera√ß√µes...');
    
    const since = options.since || 'main';
    const changes = await this.gitAnalyzer.getChangedFiles(this.projectRoot, since);
    
    if (changes.length > 0) {
      console.log(`üìù ${changes.length} arquivo(s) alterado(s) desde ${since}`);
      if (options.verbose) {
        changes.slice(0, 10).forEach(file => console.log(`   ‚Ä¢ ${file}`));
        if (changes.length > 10) {
          console.log(`   ... e mais ${changes.length - 10} arquivo(s)`);
        }
      }
    } else {
      console.log('‚úÖ Nenhuma altera√ß√£o detectada');
    }

    return changes;
  }

  async scanFeatures(changedFiles = null) {
    console.log('üìÇ Escaneando features...');
    
    const featuresPath = path.join(this.projectRoot, 'src', 'features');
    const features = await this.featureScanner.scanFeatures(featuresPath, changedFiles);
    
    console.log(`üìã ${features.length} feature(s) encontrada(s)`);
    
    if (features.length === 0) {
      console.log('‚ö†Ô∏è Nenhuma feature encontrada em src/features/');
      console.log('üí° Certifique-se de que suas features est√£o organizadas em src/features/');
      return [];
    }

    return features;
  }

  async selectFeatures(features, options) {
    if (features.length === 0) {
      return [];
    }

    if (options.all) {
      console.log('üìë Selecionando todas as features');
      return features;
    }

    if (options.features) {
      const selected = features.filter(f => 
        options.features.some(name => f.name.includes(name))
      );
      console.log(`üéØ ${selected.length} feature(s) selecionada(s) por par√¢metro`);
      return selected;
    }

    return await this.selector.selectFeatures(features);
  }

  async showPreviewAndConfirm(features) {
    if (features.length === 0) {
      return false;
    }

    console.log('\n' + '='.repeat(60));
    console.log('üìã PREVIEW DA DOCUMENTA√á√ÉO');
    console.log('='.repeat(60));

    const templates = this.config.getSelectedTemplates();
    const outputFormats = this.config.getOutputFormats();

    console.log(`\nüìù Features a serem documentadas: ${features.length}`);
    features.forEach(feature => {
      console.log(`   üìÅ ${feature.name} (${feature.components.length} componentes)`);
    });

    console.log(`\nüìã Templates: ${templates.length}`);
    templates.forEach(template => {
      console.log(`   üìÑ ${template.name} - ${template.description}`);
    });

    console.log(`\nüìÅ Formatos de sa√≠da: ${outputFormats.length}`);
    outputFormats.forEach(format => {
      console.log(`   üìÇ ${format.name} - ${format.description}`);
    });

    const totalDocs = features.length * templates.length * outputFormats.length;
    console.log(`\nüìä Total estimado: ~${totalDocs} documentos`);

    console.log('='.repeat(60));

    return await this.selector.confirmGeneration();
  }

  async generateDocumentation(features) {
    console.log('\nüöÄ Gerando documenta√ß√£o...');
    
    const startTime = Date.now();
    const results = {
      success: true,
      features: [],
      errors: [],
      warnings: [],
      stats: {
        featuresProcessed: 0,
        documentsGenerated: 0,
        templatesUsed: 0,
        duration: 0
      }
    };

    for (const feature of features) {
      try {
        console.log(`\nüìù Processando feature: ${feature.name}`);
        
        // Passar configura√ß√µes para o gerador
        const generatorOptions = {
          outputPath: this.config.get('output.path'),
          format: this.config.get('output.format'),
          ai: this.config.get('ai'),
          template: this.config.get('templates.default'),
          audience: this.config.get('templates.audience')
        };
        
        const featureResult = await this.generator.generateForFeature(feature, generatorOptions);
        
        results.features.push(featureResult);
        results.stats.featuresProcessed++;
        results.stats.documentsGenerated += featureResult.documentsGenerated;
        
      } catch (error) {
        results.errors.push({
          feature: feature.name,
          error: error.message
        });
        results.success = false;
      }
    }

    results.stats.duration = Date.now() - startTime;
    return results;
  }

  showResults(results) {
    console.log('\n' + '='.repeat(60));
    console.log('üìä RESULTADO DA GERA√á√ÉO');
    console.log('='.repeat(60));

    if (results.success) {
      console.log('‚úÖ Documenta√ß√£o gerada com sucesso!');
    } else {
      console.log('‚ö†Ô∏è Gera√ß√£o conclu√≠da com erros');
    }

    console.log(`‚è±Ô∏è  Tempo: ${(results.stats.duration / 1000).toFixed(2)}s`);
    console.log(`üìÅ Features processadas: ${results.stats.featuresProcessed}`);
    console.log(`üìù Documentos gerados: ${results.stats.documentsGenerated}`);

    if (results.features.length > 0) {
      console.log('\nüìÇ Documenta√ß√£o salva em:');
      results.features.forEach(feature => {
        console.log(`   üìÅ docs/features/${feature.name}/`);
      });
    }

    if (results.errors.length > 0) {
      console.log('\n‚ùå Erros:');
      results.errors.forEach(error => {
        console.log(`   ‚Ä¢ ${error.feature}: ${error.error}`);
      });
    }

    if (results.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è Avisos:');
      results.warnings.forEach(warning => {
        console.log(`   ‚Ä¢ ${warning}`);
      });
    }

    console.log('\nüí° Pr√≥ximos passos:');
    console.log('   ‚Ä¢ Revisar documenta√ß√£o gerada');
    console.log('   ‚Ä¢ Personalizar templates se necess√°rio');
    console.log('   ‚Ä¢ Configurar para execu√ß√£o autom√°tica');

    console.log('='.repeat(60));
  }
}

module.exports = FeatureDocsEngine;
