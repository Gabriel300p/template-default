#!/usr/bin/env node

/**
 * Feature Documentation Generator v3.0
 * Sistema inteligente para documenta√ß√£o de features
 */

// Carregar vari√°veis de ambiente
require("dotenv").config();

const FeatureDocsEngine = require("./feature-docs/core/feature-docs-engine");

async function main() {
  const engine = new FeatureDocsEngine();

  // Parse command line arguments
  const options = parseArguments();

  // Executar engine
  const success = await engine.run(options);

  process.exit(success ? 0 : 1);
}

function parseArguments() {
  const args = process.argv.slice(2);
  const options = {
    detectChanges: false,
    since: null,
    features: [],
    all: false,
    config: false,
    showConfig: false,
    verbose: false,
    debug: false,
  };

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];

    switch (arg) {
      case "--help":
      case "-h":
        showHelp();
        process.exit(0);
        break;

      case "--detect-changes":
      case "-c":
        options.detectChanges = true;
        break;

      case "--since":
        if (i + 1 < args.length) {
          options.since = args[++i];
          options.detectChanges = true;
        }
        break;

      case "--features":
      case "-f":
        if (i + 1 < args.length) {
          options.features = args[++i].split(",");
        }
        break;

      case "--all":
      case "-a":
        options.all = true;
        break;

      case "--config":
        options.config = true;
        break;

      case "--show-config":
        options.showConfig = true;
        break;

      case "--verbose":
      case "-v":
        options.verbose = true;
        break;

      case "--debug":
        options.debug = true;
        break;

      default:
        if (arg.startsWith("--")) {
          console.log(`‚ö†Ô∏è Op√ß√£o desconhecida: ${arg}`);
        }
    }
  }

  return options;
}

function showHelp() {
  console.log(`
üöÄ Feature Documentation Generator v3.0

DESCRI√á√ÉO:
  Sistema inteligente para documenta√ß√£o autom√°tica de features do frontend.
  Analisa componentes, detecta elementos UI e gera documenta√ß√£o para diferentes p√∫blicos.

USO:
  node generate-feature-docs.js [op√ß√µes]

OP√á√ïES:
  -h, --help              Exibir esta ajuda
  -c, --detect-changes    Detectar altera√ß√µes desde √∫ltimo commit
  --since <ref>           Detectar altera√ß√µes desde refer√™ncia espec√≠fica
  -f, --features <list>   Selecionar features espec√≠ficas (separadas por v√≠rgula)
  -a, --all              Documentar todas as features
  --config               Configura√ß√£o interativa
  --show-config          Exibir configura√ß√µes atuais
  -v, --verbose          Modo verboso
  --debug                Modo debug

EXEMPLOS:
  # Execu√ß√£o interativa (padr√£o)
  node generate-feature-docs.js

  # Detectar altera√ß√µes e documentar apenas features modificadas
  node generate-feature-docs.js --detect-changes

  # Documentar features espec√≠ficas
  node generate-feature-docs.js --features "comunicacoes,records"

  # Documentar todas as features
  node generate-feature-docs.js --all

  # Configurar o sistema
  node generate-feature-docs.js --config

  # Detectar altera√ß√µes desde uma branch espec√≠fica
  node generate-feature-docs.js --since main

ESTRUTURA:
  O sistema busca por features em src/features/ e gera documenta√ß√£o em docs/features/
  
  Cada feature documentada gera:
  ‚Ä¢ technical.md    - Para desenvolvedores
  ‚Ä¢ design.md       - Para designers
  ‚Ä¢ business.md     - Para POs/Analistas
  ‚Ä¢ overview.md     - Vis√£o geral

REQUISITOS:
  ‚Ä¢ Node.js 16+
  ‚Ä¢ Projeto com estrutura src/features/
  ‚Ä¢ OpenAI API Key (opcional, mas recomendado)

Para mais informa√ß√µes, consulte README-SISTEMA.md
`);
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  main().catch((error) => {
    console.error("‚ùå Erro fatal:", error);
    if (process.argv.includes("--debug")) {
      console.error(error.stack);
    }
    process.exit(1);
  });
}

module.exports = { main, parseArguments };
