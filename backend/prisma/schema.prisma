// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// AUTHENTICATION & AUTHORIZATION
// ================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  firstName String?
  lastName  String?
  avatar    String?
  bio       String?
  phone     String?
  
  // Authentication
  password     String?
  emailVerified DateTime?
  isActive     Boolean   @default(true)
  isSuspended  Boolean   @default(false)
  
  // OAuth providers
  providers UserProvider[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  // Relations
  roles        UserRole[]
  sessions     Session[]
  refreshTokens RefreshToken[]
  communications Communication[]
  
  // Audit
  createdBy String?
  updatedBy String?
  
  @@map("users")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  isSystem    Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  users       UserRole[]
  permissions RolePermission[]
  
  @@map("roles")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  resource    String
  action      String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  roles RolePermission[]
  
  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  
  // Timestamps
  createdAt DateTime @default(now())
  createdBy String?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  
  // Timestamps
  createdAt DateTime @default(now())
  createdBy String?
  
  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// ================================
// SESSION MANAGEMENT
// ================================

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

// ================================
// OAUTH PROVIDERS
// ================================

model UserProvider {
  id         String @id @default(cuid())
  userId     String
  provider   String // google, github, microsoft, etc.
  providerId String
  email      String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerId])
  @@unique([userId, provider])
  @@map("user_providers")
}

// ================================
// COMMUNICATIONS
// ================================

enum CommunicationType {
  EMAIL
  SMS
  PUSH_NOTIFICATION
  IN_APP_NOTIFICATION
  WEBHOOK
}

enum CommunicationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum CommunicationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Communication {
  id       String            @id @default(cuid())
  type     CommunicationType
  status   CommunicationStatus @default(PENDING)
  priority CommunicationPriority @default(NORMAL)
  
  // Recipients
  userId String?
  email  String?
  phone  String?
  
  // Content
  subject String?
  content String
  metadata Json?
  
  // Delivery
  sentAt      DateTime?
  deliveredAt DateTime?
  failedAt    DateTime?
  errorMessage String?
  retryCount   Int      @default(0)
  maxRetries   Int      @default(3)
  
  // Scheduling
  scheduledAt DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Audit
  createdBy String?
  
  @@map("communications")
}

// ================================
// AUDIT & LOGGING
// ================================

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  EMAIL_VERIFICATION
  ROLE_ASSIGNMENT
  PERMISSION_GRANT
  ACCOUNT_SUSPENSION
  ACCOUNT_ACTIVATION
}

model AuditLog {
  id       String      @id @default(cuid())
  action   AuditAction
  resource String
  resourceId String?
  
  // User context
  userId    String?
  userEmail String?
  ipAddress String?
  userAgent String?
  
  // Changes
  oldValues Json?
  newValues Json?
  metadata  Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}

// ================================
// SYSTEM CONFIGURATION
// ================================

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json
  
  // Metadata
  description String?
  category    String?
  isPublic    Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Audit
  createdBy String?
  updatedBy String?
  
  @@map("system_configs")
}

// ================================
// FILE UPLOADS
// ================================

model FileUpload {
  id       String @id @default(cuid())
  filename String
  originalName String
  mimeType String
  size     Int
  path     String
  url      String?
  
  // Metadata
  metadata Json?
  
  // Relations
  userId String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("file_uploads")
}

